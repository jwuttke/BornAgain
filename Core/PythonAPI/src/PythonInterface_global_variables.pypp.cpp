// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "PythonInterface_global_variables.pypp.h"

namespace bp = boost::python;

void register_global_variables(){

    bp::scope().attr("PI") = Units::PI;

    bp::scope().attr("PI2") = Units::PI2;

    bp::scope().attr("PID2") = Units::PID2;

    bp::scope().attr("PID4") = Units::PID4;

    bp::scope().attr("PI_SQR") = Units::PI_SQR;

    bp::scope().attr("angstrom") = Units::angstrom;

    bp::scope().attr("deg") = Units::deg;

    bp::scope().attr("degree") = Units::degree;

    bp::scope().attr("gauss") = Units::gauss;

    bp::scope().attr("meter") = Units::meter;

    bp::scope().attr("micrometer") = Units::micrometer;

    bp::scope().attr("millimeter") = Units::millimeter;

    bp::scope().attr("milliradian") = Units::milliradian;

    bp::scope().attr("mrad") = Units::mrad;

    bp::scope().attr("nanometer") = Units::nanometer;

    bp::scope().attr("nm") = Units::nm;

    bp::scope().attr("rad") = Units::rad;

    bp::scope().attr("radian") = Units::radian;

    bp::scope().attr("sr") = Units::sr;

    bp::scope().attr("steradian") = Units::steradian;

    bp::scope().attr("tesla") = Units::tesla;

}
