// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "RealParameterWrapper.pypp.h"

namespace bp = boost::python;

void register_RealParameterWrapper_class(){

    { //::RealParameterWrapper
        typedef bp::class_< RealParameterWrapper > RealParameterWrapper_exposer_t;
        RealParameterWrapper_exposer_t RealParameterWrapper_exposer = RealParameterWrapper_exposer_t( "RealParameterWrapper", bp::no_init );
        bp::scope RealParameterWrapper_scope( RealParameterWrapper_exposer );
        RealParameterWrapper_exposer.def( bp::init< RealParameterWrapper const & >(( bp::arg("other") )) );
        { //::RealParameterWrapper::getValue
        
            typedef double ( ::RealParameterWrapper::*getValue_function_type)(  ) const;
            
            RealParameterWrapper_exposer.def( 
                "getValue"
                , getValue_function_type( &::RealParameterWrapper::getValue ) );
        
        }
        { //::RealParameterWrapper::isNull
        
            typedef bool ( ::RealParameterWrapper::*isNull_function_type)(  ) const;
            
            RealParameterWrapper_exposer.def( 
                "isNull"
                , isNull_function_type( &::RealParameterWrapper::isNull ) );
        
        }
        RealParameterWrapper_exposer.def( bp::self != bp::self );
        { //::RealParameterWrapper::operator=
        
            typedef ::RealParameterWrapper & ( ::RealParameterWrapper::*assign_function_type)( ::RealParameterWrapper const & ) ;
            
            RealParameterWrapper_exposer.def( 
                "assign"
                , assign_function_type( &::RealParameterWrapper::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RealParameterWrapper_exposer.def( bp::self == bp::self );
        { //::RealParameterWrapper::setValue
        
            typedef bool ( ::RealParameterWrapper::*setValue_function_type)( double ) ;
            
            RealParameterWrapper_exposer.def( 
                "setValue"
                , setValue_function_type( &::RealParameterWrapper::setValue )
                , ( bp::arg("value") ) );
        
        }
    }

}
