// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "PythonCoreList.h"
#include "SpecularSimulation.pypp.h"

namespace bp = boost::python;

struct SpecularSimulation_wrapper : SpecularSimulation, bp::wrapper< SpecularSimulation > {

    SpecularSimulation_wrapper( )
    : SpecularSimulation( )
      , bp::wrapper< SpecularSimulation >(){
        // null constructor
    m_pyobj = 0;
    }

    SpecularSimulation_wrapper(::ISample const & sample )
    : SpecularSimulation( boost::ref(sample) )
      , bp::wrapper< SpecularSimulation >(){
        // constructor
    m_pyobj = 0;
    }

    SpecularSimulation_wrapper(::SampleBuilder_t sample_builder )
    : SpecularSimulation( sample_builder )
      , bp::wrapper< SpecularSimulation >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::SpecularSimulation * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->SpecularSimulation::clone(  );
        }
    }
    
    ::SpecularSimulation * default_clone(  ) const  {
        return SpecularSimulation::clone( );
    }

    virtual bool areParametersChanged(  ) {
        if( bp::override func_areParametersChanged = this->get_override( "areParametersChanged" ) )
            return func_areParametersChanged(  );
        else{
            return this->IParameterized::areParametersChanged(  );
        }
    }
    
    bool default_areParametersChanged(  ) {
        return IParameterized::areParametersChanged( );
    }

    virtual void clearParameterPool(  ) {
        if( bp::override func_clearParameterPool = this->get_override( "clearParameterPool" ) )
            func_clearParameterPool(  );
        else{
            this->IParameterized::clearParameterPool(  );
        }
    }
    
    void default_clearParameterPool(  ) {
        IParameterized::clearParameterPool( );
    }

    virtual ::ParameterPool * createParameterTree(  ) const  {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->IParameterized::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) const  {
        return IParameterized::createParameterTree( );
    }

    virtual void printParameters(  ) const  {
        if( bp::override func_printParameters = this->get_override( "printParameters" ) )
            func_printParameters(  );
        else{
            this->IParameterized::printParameters(  );
        }
    }
    
    void default_printParameters(  ) const  {
        IParameterized::printParameters( );
    }

    virtual void registerParameter( ::std::string const & name, double * parpointer, ::AttLimits const & limits=AttLimits::limitless( ) ) {
        namespace bpl = boost::python;
        if( bpl::override func_registerParameter = this->get_override( "registerParameter" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_registerParameter.ptr(), name, parpointer, limits );
        }
        else{
            IParameterized::registerParameter( name, parpointer, boost::ref(limits) );
        }
    }
    
    static void default_registerParameter( ::IParameterized & inst, ::std::string const & name, long unsigned int parpointer, ::AttLimits const & limits=AttLimits::limitless( ) ){
        if( dynamic_cast< SpecularSimulation_wrapper * >( boost::addressof( inst ) ) ){
            inst.::IParameterized::registerParameter(name, reinterpret_cast< double * >( parpointer ), limits);
        }
        else{
            inst.registerParameter(name, reinterpret_cast< double * >( parpointer ), limits);
        }
    }

    virtual bool setParameterValue( ::std::string const & name, double value ) {
        if( bp::override func_setParameterValue = this->get_override( "setParameterValue" ) )
            return func_setParameterValue( name, value );
        else{
            return this->IParameterized::setParameterValue( name, value );
        }
    }
    
    bool default_setParameterValue( ::std::string const & name, double value ) {
        return IParameterized::setParameterValue( name, value );
    }

    virtual void setParametersAreChanged(  ) {
        if( bp::override func_setParametersAreChanged = this->get_override( "setParametersAreChanged" ) )
            func_setParametersAreChanged(  );
        else{
            this->IParameterized::setParametersAreChanged(  );
        }
    }
    
    void default_setParametersAreChanged(  ) {
        IParameterized::setParametersAreChanged( );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_SpecularSimulation_class(){

    { //::SpecularSimulation
        typedef bp::class_< SpecularSimulation_wrapper, bp::bases< ICloneable, IParameterized >, std::auto_ptr< SpecularSimulation_wrapper >, boost::noncopyable > SpecularSimulation_exposer_t;
        SpecularSimulation_exposer_t SpecularSimulation_exposer = SpecularSimulation_exposer_t( "SpecularSimulation", bp::init< >() );
        bp::scope SpecularSimulation_scope( SpecularSimulation_exposer );
        SpecularSimulation_exposer.def( bp::init< ISample const & >(( bp::arg("sample") )) );
        SpecularSimulation_exposer.def( bp::init< SampleBuilder_t >(( bp::arg("sample_builder") )) );
        { //::SpecularSimulation::clone
        
            typedef ::SpecularSimulation * ( ::SpecularSimulation::*clone_function_type)(  ) const;
            typedef ::SpecularSimulation * ( SpecularSimulation_wrapper::*default_clone_function_type)(  ) const;
            
            SpecularSimulation_exposer.def( 
                "clone"
                , clone_function_type(&::SpecularSimulation::clone)
                , default_clone_function_type(&SpecularSimulation_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::SpecularSimulation::getAlphaAxis
        
            typedef ::IAxis const * ( ::SpecularSimulation::*getAlphaAxis_function_type)(  ) const;
            
            SpecularSimulation_exposer.def( 
                "getAlphaAxis"
                , getAlphaAxis_function_type( &::SpecularSimulation::getAlphaAxis )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::SpecularSimulation::getLayerRTCoefficients
        
            typedef ::boost::shared_ptr< const ILayerRTCoefficients > ( ::SpecularSimulation::*getLayerRTCoefficients_function_type)( ::std::size_t,::std::size_t ) const;
            
            SpecularSimulation_exposer.def( 
                "getLayerRTCoefficients"
                , getLayerRTCoefficients_function_type( &::SpecularSimulation::getLayerRTCoefficients )
                , ( bp::arg("i_alpha"), bp::arg("i_layer") ) );
        
        }
        { //::SpecularSimulation::getSample
        
            typedef ::ISample * ( ::SpecularSimulation::*getSample_function_type)(  ) const;
            
            SpecularSimulation_exposer.def( 
                "getSample"
                , getSample_function_type( &::SpecularSimulation::getSample )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::SpecularSimulation::getSampleBuilder
        
            typedef ::SampleBuilder_t ( ::SpecularSimulation::*getSampleBuilder_function_type)(  ) const;
            
            SpecularSimulation_exposer.def( 
                "getSampleBuilder"
                , getSampleBuilder_function_type( &::SpecularSimulation::getSampleBuilder ) );
        
        }
        { //::SpecularSimulation::getScalarKz
        
            typedef ::std::vector< std::complex<double> > ( ::SpecularSimulation::*getScalarKz_function_type)( ::std::size_t ) const;
            
            SpecularSimulation_exposer.def( 
                "getScalarKz"
                , getScalarKz_function_type( &::SpecularSimulation::getScalarKz )
                , ( bp::arg("i_layer") ) );
        
        }
        { //::SpecularSimulation::getScalarR
        
            typedef ::std::vector< std::complex<double> > ( ::SpecularSimulation::*getScalarR_function_type)( ::std::size_t ) const;
            
            SpecularSimulation_exposer.def( 
                "getScalarR"
                , getScalarR_function_type( &::SpecularSimulation::getScalarR )
                , ( bp::arg("i_layer") ) );
        
        }
        { //::SpecularSimulation::getScalarT
        
            typedef ::std::vector< std::complex<double> > ( ::SpecularSimulation::*getScalarT_function_type)( ::std::size_t ) const;
            
            SpecularSimulation_exposer.def( 
                "getScalarT"
                , getScalarT_function_type( &::SpecularSimulation::getScalarT )
                , ( bp::arg("i_layer") ) );
        
        }
        { //::SpecularSimulation::prepareSimulation
        
            typedef void ( ::SpecularSimulation::*prepareSimulation_function_type)(  ) ;
            
            SpecularSimulation_exposer.def( 
                "prepareSimulation"
                , prepareSimulation_function_type( &::SpecularSimulation::prepareSimulation ) );
        
        }
        { //::SpecularSimulation::runSimulation
        
            typedef void ( ::SpecularSimulation::*runSimulation_function_type)(  ) ;
            
            SpecularSimulation_exposer.def( 
                "runSimulation"
                , runSimulation_function_type( &::SpecularSimulation::runSimulation ) );
        
        }
        { //::SpecularSimulation::setBeamParameters
        
            typedef void ( ::SpecularSimulation::*setBeamParameters_function_type)( double,::IAxis const & ) ;
            
            SpecularSimulation_exposer.def( 
                "setBeamParameters"
                , setBeamParameters_function_type( &::SpecularSimulation::setBeamParameters )
                , ( bp::arg("lambda"), bp::arg("alpha_axis") ) );
        
        }
        { //::SpecularSimulation::setBeamParameters
        
            typedef void ( ::SpecularSimulation::*setBeamParameters_function_type)( double,int,double,double ) ;
            
            SpecularSimulation_exposer.def( 
                "setBeamParameters"
                , setBeamParameters_function_type( &::SpecularSimulation::setBeamParameters )
                , ( bp::arg("lambda"), bp::arg("nbins"), bp::arg("alpha_i_min"), bp::arg("alpha_i_max") ) );
        
        }
        { //::SpecularSimulation::setEvanescentWaveAxis
        
            typedef void ( ::SpecularSimulation::*setEvanescentWaveAxis_function_type)( ::IAxis const & ) ;
            
            SpecularSimulation_exposer.def( 
                "setEvanescentWaveAxis"
                , setEvanescentWaveAxis_function_type( &::SpecularSimulation::setEvanescentWaveAxis )
                , ( bp::arg("z_axis") ) );
        
        }
        { //::SpecularSimulation::setEvanescentWaveAxis
        
            typedef void ( ::SpecularSimulation::*setEvanescentWaveAxis_function_type)( int,double,double ) ;
            
            SpecularSimulation_exposer.def( 
                "setEvanescentWaveAxis"
                , setEvanescentWaveAxis_function_type( &::SpecularSimulation::setEvanescentWaveAxis )
                , ( bp::arg("nbins"), bp::arg("z_min"), bp::arg("z_max") ) );
        
        }
        { //::SpecularSimulation::setSample
        
            typedef void ( ::SpecularSimulation::*setSample_function_type)( ::ISample const & ) ;
            
            SpecularSimulation_exposer.def( 
                "setSample"
                , setSample_function_type( &::SpecularSimulation::setSample )
                , ( bp::arg("sample") ) );
        
        }
        { //::SpecularSimulation::setSampleBuilder
        
            typedef void ( ::SpecularSimulation::*setSampleBuilder_function_type)( ::SampleBuilder_t ) ;
            
            SpecularSimulation_exposer.def( 
                "setSampleBuilder"
                , setSampleBuilder_function_type( &::SpecularSimulation::setSampleBuilder )
                , ( bp::arg("sample_builder") ) );
        
        }
        { //::IParameterized::areParametersChanged
        
            typedef bool ( ::IParameterized::*areParametersChanged_function_type)(  ) ;
            typedef bool ( SpecularSimulation_wrapper::*default_areParametersChanged_function_type)(  ) ;
            
            SpecularSimulation_exposer.def( 
                "areParametersChanged"
                , areParametersChanged_function_type(&::IParameterized::areParametersChanged)
                , default_areParametersChanged_function_type(&SpecularSimulation_wrapper::default_areParametersChanged) );
        
        }
        { //::IParameterized::clearParameterPool
        
            typedef void ( ::IParameterized::*clearParameterPool_function_type)(  ) ;
            typedef void ( SpecularSimulation_wrapper::*default_clearParameterPool_function_type)(  ) ;
            
            SpecularSimulation_exposer.def( 
                "clearParameterPool"
                , clearParameterPool_function_type(&::IParameterized::clearParameterPool)
                , default_clearParameterPool_function_type(&SpecularSimulation_wrapper::default_clearParameterPool) );
        
        }
        { //::IParameterized::createParameterTree
        
            typedef ::ParameterPool * ( ::IParameterized::*createParameterTree_function_type)(  ) const;
            typedef ::ParameterPool * ( SpecularSimulation_wrapper::*default_createParameterTree_function_type)(  ) const;
            
            SpecularSimulation_exposer.def( 
                "createParameterTree"
                , createParameterTree_function_type(&::IParameterized::createParameterTree)
                , default_createParameterTree_function_type(&SpecularSimulation_wrapper::default_createParameterTree)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IParameterized::printParameters
        
            typedef void ( ::IParameterized::*printParameters_function_type)(  ) const;
            typedef void ( SpecularSimulation_wrapper::*default_printParameters_function_type)(  ) const;
            
            SpecularSimulation_exposer.def( 
                "printParameters"
                , printParameters_function_type(&::IParameterized::printParameters)
                , default_printParameters_function_type(&SpecularSimulation_wrapper::default_printParameters) );
        
        }
        { //::IParameterized::registerParameter
        
            typedef void ( *default_registerParameter_function_type )( ::IParameterized &,::std::string const &,long unsigned int,::AttLimits const & );
            
            SpecularSimulation_exposer.def( 
                "registerParameter"
                , default_registerParameter_function_type( &SpecularSimulation_wrapper::default_registerParameter )
                , ( bp::arg("inst"), bp::arg("name"), bp::arg("parpointer"), bp::arg("limits")=AttLimits::limitless( ) ) );
        
        }
        { //::IParameterized::setParameterValue
        
            typedef bool ( ::IParameterized::*setParameterValue_function_type)( ::std::string const &,double ) ;
            typedef bool ( SpecularSimulation_wrapper::*default_setParameterValue_function_type)( ::std::string const &,double ) ;
            
            SpecularSimulation_exposer.def( 
                "setParameterValue"
                , setParameterValue_function_type(&::IParameterized::setParameterValue)
                , default_setParameterValue_function_type(&SpecularSimulation_wrapper::default_setParameterValue)
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::IParameterized::setParametersAreChanged
        
            typedef void ( ::IParameterized::*setParametersAreChanged_function_type)(  ) ;
            typedef void ( SpecularSimulation_wrapper::*default_setParametersAreChanged_function_type)(  ) ;
            
            SpecularSimulation_exposer.def( 
                "setParametersAreChanged"
                , setParametersAreChanged_function_type(&::IParameterized::setParametersAreChanged)
                , default_setParametersAreChanged_function_type(&SpecularSimulation_wrapper::default_setParametersAreChanged) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( SpecularSimulation_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            SpecularSimulation_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&SpecularSimulation_wrapper::default_transferToCPP) );
        
        }
    }

}
