# print content of BornAgain's Python docstring for all methods related to user python API
# (docstring is generated by pyplusplus and boost::python)

import string
from libBornAgainCore import *
from libBornAgainFit import *


user_api = [
    "Crystal",
    "Crystal.setDWFactor",
    "FTDistribution2DCauchy",
    "FormFactorBox",
    "FormFactorCone",
    "FormFactorCylinder",
    "FormFactorDecoratorDebyeWaller",
    "FormFactorEllipsoid",
    "FormFactorFullSphere",
    "FormFactorFullSpheroid",
    "FormFactorGauss",
    "FormFactorHemiSpheroid",
    "FormFactorLorentz",
    "FormFactorParallelepiped",
    "FormFactorPrism3",
    "FormFactorPrism6",
    "FormFactorPyramid",
    "FormFactorSphere",
    "FormFactorSphereGaussianRadius",
    "IFormFactorBorn.evaluate_for_q",
    "InterferenceFunctionRadialParaCrystal",
    "InterferenceFunctionRadialParaCrystal.setKappa",
    "InterferenceFunction2DLattice",
    "InterferenceFunction2DParaCrystal",
    "InterferenceFunction2DParaCrystal.createHexagonal",
    "InterferenceFunction2DParaCrystal.setDomainSizes",
    "InterferenceFunction2DParaCrystal.setProbabilityDistributions",
    "InterferenceFunctionNone",
    "Lattice",
    "Lattice.createTrigonalLattice",
    "Lattice.getBasisVectorA",
    "Lattice.getBasisVectorB",
    "Lattice.getBasisVectorC",
    "Lattice.setSelectionRule",
    "Lattice2DIFParameters",
    "ParticleComposition",
    "ParticleComposition.addParticle",
    "ParticleComposition.addParticles",
    "Layer",
    "Layer.setDecoration",
    "LayerRoughness",
    "MaterialManager.getHomogeneousMagneticMaterial",
    "MaterialManager.getHomogeneousMaterial",
    "MesoCrystal",
    "MultiLayer",
    "MultiLayer.addLayer",
    "MultiLayer.addLayerWithTopRoughness",
    "Particle",
    "ParticleBuilder",
    "ParticleBuilder.plantParticles",
    "ParticleBuilder.setPrototype",
    "ParticleCoreShell",
    "ParticleDecoration",
    "ParticleDecoration.addInterferenceFunction",
    "ParticleDecoration.addParticle",
    "ParticleDecoration.addParticleInfo",
    "ParticleDecoration.setTotalParticleSurfaceDensity",
    "PositionParticleInfo",
    "ResolutionFunction2DGaussian",
    "Simulation",
    "Simulation.getIntensityData",
    "Simulation.runSimulation",
    "Simulation.setBeamIntensity",
    "Simulation.setBeamParameters",
    "Simulation.setDetectorParameters",
    "Simulation.setDetectorResolutionFunction",
    "Simulation.setSample",
    "SimulationParameters",
    "StochasticDoubleGaussian",
    "StochasticSampledParameter",
]

def get_classname(object_name):
    """
    Return class name: MaterialManager.getHomogeneousMaterial will become MaterialManager
    """
    return object_name.split('.')[0]


def get_docstring(object_name):
    """
    Return doc string for given object. Constructor and method are distinguished via "." in name
    """
    if "." in object_name:
        # "addInterferenceFunction( (ParticleDecoration)arg1, (IInterferenceFunction)interference_function)" will become
        # "addInterferenceFunction((IInterferenceFunction)interference_function)"
        method = eval(object_name+".__doc__") # method docstring
        pattern = " ("+get_classname(object_name)+")arg1, "
        method = method.replace(pattern,"")
        return method
    else:
        # "__init__( (object)arg1, (IMaterial)p_material, (IFormFactor)form_factor) -> None" will become
        # "Particle((IMaterial)p_material, (IFormFactor)form_factor)"
        ctor = eval(object_name+".__init__.__doc__") # c-tor docstring
        ctor = ctor.replace("__init__", get_classname(object_name))
        ctor = ctor.replace(" -> None", "")
        ctor = ctor.replace(" (object)arg1, ", "")
        ctor = ctor.replace(" (object)arg1", "")
        return ctor


def convert_docstring(boost_docstr):
    """
    convert boost::python docstring into the list of docstrings
    """
    str_list = [s.strip(' \t\n\r') for s in boost_docstr.splitlines()] # split lines
    str_list = filter(None, str_list)  # remove empty strings
    return str_list


def redmine_table():
    """
    Run through list of methods and print on the screen the Redmine table with docstring
    """
    for obj in user_api:
        class_name = obj.split('.')[0]
        docstr = get_docstring(obj)
        methods = convert_docstring(docstr)
        for i in range(0, len(methods)):
            if i == 0:
                print '| %-20s | %-60s |' % (class_name, methods[i])
            else:
                print '| %-20s | %-60s |' % (" ", methods[i])

if __name__ == '__main__':
    redmine_table()
